#summary How to Install Open eSignForms on Amazon EC2.
#labels Phase-Deploy

<g:plusone size="medium"></g:plusone>

= Introduction =

This guide will take you through installing Open eSignForms on a micro Amazon Linux instance for the purposes of *testing* the web contracting application. If you find that the application meets your needs, we recommend seeking professional services through Yozons for help with a production setup for a quality deployment.

=== Pre-requisites ===

* Understanding of how to setup create and connect to an Amazon EC2 instance.

=== Target Audience ===

# System Administrators


= Create an Instance =

Launch a new Amazon Linux AMI. This tutorial was created using Amazon Linux AMI 2014.03. Choose the 64-bit version.

For the purposes of this tutorial, the *Free tier eligible* instance will do. 

At this time, Micro Instances have the following specifications:

*Size: t1.micro
*ECUs: Up to 2
*vCPUs: 1
*Memory: .613 (GiB)
*Instance Storage: EBS Only
*EBS-Optimized Available: -
*Network Performance: Very Low

When creating the AMI, _leave all the defaults_ and click *Review and Launch*.

_For maximum security, create a new dedicated keypair for this instance and download it (preferably to a dedicated USB drive)._

== Granting Access ==
For the purposes of our test, we will allow access to our instance from anywhere over the web by opening up the HTTP port. Since we only want to manage this instance from a single IP address, we will allow SSH access from only one IP address.

Configure security groups in Amazon EC2 management interface as follows:

Port 80 Allow from 0.0.0.0 (Anywhere)
Port 22 Allow from (Your IP Address)

== Assigning and Elastic IP Address (optional) ==

For the best testing experience, we recommend assigning an Elastic IP address to your instance. This will ensure the Open eSignForms application will be able to send and receive e-mail properly.

_Note: In a production environment, you may want another system to handle relay e-mail for security and/or organization requirements._

= Connect to the Instance =

Connect to your instance using the username *ec2-user* with the private key you downloaded earlier. The following command will work if you are connecting from a linux based system.

`chmod 700 privatekey.pem;`
`ssh -i privatekey.pem ec2-user@ec2-54-186-255-44.us-west-2.compute.amazonaws.com`

== Update the Instance ==

Once connected, download the latest updates to the instance with the following command:

`sudo yum update`

== Install Dependencies ==

You won't be using all of these software packages for this demo but go ahead and install them just in case.

{{{
sudo yum install iptables ntp logwatch dos2unix gpg bind-utils jwhois telnet traceroute make gcc libgcc gcc-c++ glibc-devel readline readline-devel ncurses ncurses-devel zlib zlib-devel zip unzip pam pam-devel postfix screen lynx dovecot rsync -y
}}}

== Configure Timezone ==

Check that your instance has the correct time by issuing the following command:

`date`

If the date shown is incorrect, correct it using the following commands:

{{{  
sudo rm -f /etc/localtime
sudo ln -s /usr/share/zoneinfo/America/Chicago /etc/localtime
}}}

Edit the /etc/sysconfig/clock to reflect your chosen timezone. Leave UTC set to true.

`sudo nano /etc/sysconfig/clock`

{{{
ZONE="America/Chicago"
UTC=true
}}}


_Note: Substitute *America/Chicago* with the timezone of your choice_

Start the network time daemon and set it to start on boot.
{{{
service ntpd start
chkconfig ntpd on
}}} 
== Install Tomcat ==

`sudo yum install tomcat7`

== Install Postgresql ==

`sudo yum install postgresql-server`
 